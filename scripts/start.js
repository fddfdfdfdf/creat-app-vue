'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
    throw err;
});

// Ensure environment variables are read.
require('../config/env');

const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');


// Tools like Cloud9 rely on this.
const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
const HOST = process.env.HOST || '0.0.0.0';

const config = configFactory('development');


// Create a webpack compiler that is configured with custom messages.

// Load proxy config
const proxySetting = require(paths.appPackageJson).proxy;
const proxyConfig = createDevServerConfig(proxySetting);
// Serve webpack assets generated by the compiler over a web server.

WebpackDevServer.addDevServerEntrypoints(config, proxyConfig);
const compiler = webpack(config);

const devServer = new WebpackDevServer(compiler, proxyConfig);
// Launch WebpackDevServer.
devServer.listen(DEFAULT_PORT, HOST, err => {
    if (err) {
        return console.log(err);
    }
});

